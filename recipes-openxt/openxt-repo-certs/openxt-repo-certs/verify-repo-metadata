#!/bin/sh
#
# Verifies the integrity of the metadata files in an OpenXT repository.

PROD_CERT_FILE="/usr/share/xenclient/repo-certs/prod/cert.pem"
DEV_CERT_FILE="/usr/share/xenclient/repo-certs/dev/cert.pem"

parse_args()
{
    ALLOW_DEV_KEY=0

    if [ "$1" = "-d" ] ; then
        ALLOW_DEV_KEY=1
        shift
    fi

    if [ $# -ne 1 ] ; then
        usage
        exit 2
    fi

    REPOSITORY_DIR="$1"

    REPOSITORY_FILE="${REPOSITORY_DIR}/OXT-REPOSITORY"
    PACKAGES_FILE="${REPOSITORY_DIR}/OXT-PACKAGES"
    SIGNATURE_FILE="${REPOSITORY_DIR}/OXT-SIGNATURE"
}

usage()
{
    cat <<EOF
Usage: $(basename $0) [-d] REPOSITORY_DIR

Verifies the integrity of the metadata files (OXT-REPOSITORY, OXT-PACKAGES and
OXT-SIGNATURE) in an ${OXT_BRAND_MC} repository:

  - Checks that OXT-PACKAGES matches the checksum listed in OXT-REPOSITORY.
  - Checks that OXT-REPOSITORY matches the signature in OXT-SIGNATURE.

Note that this only verifies the integrity of the metadata files: it does not
verify that the packages in the repository match the checksums listed in
OXT-PACKAGES.

The -d option should only be used for testing purposes. It allows signatures
created with the ${OXT_BRAND_MC} development signing certificate in addition to
signatures created with the ${OXT_BRAND_MC} production signing certificate.

Exit status:

    0  metadata is valid
    1  metadata is valid except for invalid signature
    2  metadata is not valid or another error occurred

EOF
}

verify_oxt_packages()
{
    local PACKAGES_CHECKSUM=$(sed -n 's/^packages://p' "${REPOSITORY_FILE}") ||
        die "error reading '${REPOSITORY_FILE}'"

    [ -n "${PACKAGES_CHECKSUM}" ] ||
        die "OXT-PACKAGES checksum MISSING"

    local FILE_CHECKSUM=$(sha256sum "${PACKAGES_FILE}" | cut -f1 -d' ') ||
        die "error calculating checksum of '${PACKAGES_FILE}'"

    [ -n "${FILE_CHECKSUM}" ] ||
        die "error calculating checksum of '${PACKAGES_FILE}'"

    [ "${FILE_CHECKSUM}" = "${PACKAGES_CHECKSUM}" ] ||
        die "OXT-PACKAGES checksum NOT VALID"
}

verify_oxt_repository()
{
    local TEMP_FILE=$(mktemp -t) ||
        die "error creating temporary file"

    local VALID=0

    if verify_signature "${PROD_CERT_FILE}" 2> "${TEMP_FILE}" ; then
        VALID=1
    elif [ "${ALLOW_DEV_KEY}" -eq 1 ] ; then
        if verify_signature "${DEV_CERT_FILE}" 2> "${TEMP_FILE}" ; then
            VALID=1
        fi
    fi

    if [ "${VALID}" -eq 0 ] ; then
        cat "${TEMP_FILE}" >&2
        rm -f "${TEMP_FILE}"
        echo "$(basename $0): signature NOT VALID" >&2
        exit 1
    fi

    rm -f "${TEMP_FILE}"
}

verify_signature()
{
    local CERT_FILE="$1"

    openssl smime -verify \
                  -in "${SIGNATURE_FILE}" \
                  -inform PEM \
                  -content "${REPOSITORY_FILE}" \
                  -CAfile "${CERT_FILE}" > /dev/null
}

die()
{
    echo "$(basename $0): $*" >&2
    exit 2
}

parse_args "$@"

# Verify OXT-PACKAGES against checksum in OXT-REPOSITORY.
verify_oxt_packages

# Verify OXT-REPOSITORY against signature in OXT-SIGNATURE. Must be done last,
# so we only exit with status 1 if metadata is valid except for signature.
verify_oxt_repository

exit 0
